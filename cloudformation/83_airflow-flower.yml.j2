Description: Creates Airflow Flower Service

Resources:
  FlowerExternalSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Airflow Flower.  Allow all inbound traffic.
      GroupName: "{{ serviceName }}-{{ ENVIRONMENT }}-flower-external-security-group"
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          FromPort: 0
          IpProtocol: -1
          ToPort: 0
      SecurityGroupIngress:
      {% for ip in whitelistedIPs %}
        - CidrIp: "{{ ip }}"
          FromPort: "{{ service.port }}"
          IpProtocol: tcp
          ToPort: "{{ service.port }}"
      {% endfor %}
      VpcId: !ImportValue network-VpcId
      Tags:
        - Key: Name
          Value: "{{ serviceName }}-{{ ENVIRONMENT }}-flower-external-security-group"

  FlowerInternalSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Airflow Flower
      GroupName: "{{ serviceName }}-{{ ENVIRONMENT }}-flower-internal-security-group"
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          FromPort: 0
          IpProtocol: -1
          ToPort: 0
      SecurityGroupIngress:
        - SourceSecurityGroupId: !GetAtt FlowerExternalSecurityGroup.GroupId
          FromPort: "{{ service.flower.port }}"
          IpProtocol: tcp
          ToPort: "{{ service.flower.port }}"
      VpcId: !ImportValue network-VpcId
      Tags:
        - Key: Name
          Value: "{{ serviceName }}-{{ ENVIRONMENT }}-flower-internal-security-group"

  FlowerTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: "{{ service.flower.cpu }}"
      Memory: "{{ service.flower.memory }}"
      ExecutionRoleArn: !ImportValue iam-ECSTaskRoleArn
      Family: "{{ serviceName }}-{{ ENVIRONMENT }}-flower-task-definition"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Name: "{{ serviceName }}-{{ ENVIRONMENT }}-flower"
          Image: !Sub
            - "${AWS::AccountId}.dkr.ecr.{{ AWS_REGION }}.amazonaws.com/${ecr_repository}:latest"
            - ecr_repository: !ImportValue ecr-AirflowDockerRepositoryName
          Essential: true
          PortMappings:
            - ContainerPort: "{{ service.flower.port }}"
              HostPort: "{{ service.flower.port }}"
          Command:
            - flower
          Environment:
            - Name: REDIS_HOST
              Value: !ImportValue redis-CeleryBackendHost
            - Name: REDIS_PORT
              Value: !ImportValue redis-CeleryBackendPort
            - Name: POSTGRES_HOST
              Value: !ImportValue database-MetadataDBInstanceHost
            - Name: POSTGRES_PORT
              Value: !ImportValue database-MetadataDBInstancePort
            - Name: POSTGRES_USER
              Value: {% raw %} !Join ['', ['{{resolve:secretsmanager:', !ImportValue secrets-MetadataDBSecretId, ':SecretString:username}}' ]] {% endraw %}
            - Name: POSTGRES_PASSWORD
              Value: {% raw %} !Join ['', ['{{resolve:secretsmanager:', !ImportValue secrets-MetadataDBSecretId, ':SecretString:password}}' ]] {% endraw %}
            - Name: POSTGRES_DB
              Value: "{{ metadataDb.dbName }}"
            - Name: AIRFLOW_BASE_URL
              Value: "{{ service.baseUrl }}"
            - Name: ENABLE_REMOTE_LOGGING
              Value: False
            - Name: STAGE
              Value: "{{ ENVIRONMENT }}"
            - Name: FERNET_KEY
              Value: {% raw %} !Join ['', ['{{resolve:secretsmanager:', 'airflow-dev-fernet-key', ':SecretString:fernet_key}}' ]] {% endraw %}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !ImportValue cloudwatch-AirflowECSLogGroupName
              awslogs-region: "{{ AWS_REGION }}"
              awslogs-stream-prefix: flower
      Tags:
        - Key: Name
          Value: "{{ serviceName }}-{{ ENVIRONMENT }}-flower-task-definition"

  FlowerAlb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: "{{ serviceName }}-{{ ENVIRONMENT }}-flower-alb"
      Type: application
      SecurityGroups:
        - !Ref FlowerExternalSecurityGroup
      Subnets:
        - !ImportValue network-PublicSubnet1Id
        - !ImportValue network-PublicSubnet2Id
        - !ImportValue network-PublicSubnet3Id
      Tags:
        - Key: Name
          Value: "{{ serviceName }}-{{ ENVIRONMENT }}-flower-alb"

  FlowerAlbTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: "{{ serviceName }}-{{ ENVIRONMENT }}-flower-alb-tg"
      Port: "{{ service.flower.port }}"
      Protocol: HTTP
      VpcId: !ImportValue network-VpcId
      TargetType: ip
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckPort: "{{ service.flower.port }}"
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 3
      Tags:
        - Key: Name
          Value: "{{ serviceName }}-{{ ENVIRONMENT }}-flower-alb-tg"

  FlowerAlbListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref FlowerAlbTargetGroup
          Type: forward
      LoadBalancerArn: !Ref FlowerAlb
      Port: "{{ service.port }}"
      Protocol: HTTP


  FlowerEcsService:
    Type: AWS::ECS::Service
    DependsOn: FlowerAlbListener
    Properties:
      ServiceName: "{{ serviceName }}-{{ ENVIRONMENT }}-flower"
      Cluster: !ImportValue ecs-AirflowECSClusteArn
      TaskDefinition: !Ref FlowerTaskDefinition
      LaunchType: FARGATE
      DesiredCount: "{{ service.flower.desiredCount }}"
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref FlowerInternalSecurityGroup
          Subnets:
            - !ImportValue network-PublicSubnet1Id
            - !ImportValue network-PublicSubnet2Id
            - !ImportValue network-PublicSubnet3Id
      LoadBalancers:
        - ContainerName: "{{ serviceName }}-{{ ENVIRONMENT }}-flower"
          ContainerPort: "{{ service.flower.port }}"
          TargetGroupArn: !Ref FlowerAlbTargetGroup

  FlowerScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: "{{ service.flower.autoscaling.maxCapacity }}"
      MinCapacity: "{{ service.flower.autoscaling.minCapacity }}"
      RoleARN: !Sub 'arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService'
      ServiceNamespace: ecs
      ScalableDimension: 'ecs:service:DesiredCount'
      ResourceId: !Join ["/", [service, !ImportValue ecs-AirflowECSClusterId, !GetAtt FlowerEcsService.Name]]


  ServiceScalingPolicyCPU:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: "{{ serviceName }}-{{ ENVIRONMENT }}-flower-tracking-cpu"
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref FlowerScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: "{{ service.flower.autoscaling.cpu.target }}"
        ScaleInCooldown: "{{ service.flower.autoscaling.cpu.scaleInCooldown }}"
        ScaleOutCooldown: "{{ service.flower.autoscaling.cpu.scaleOutCooldown }}"
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization

  ServiceScalingPolicyMemory:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: "{{ serviceName }}-{{ ENVIRONMENT }}-flower-tracking-memory"
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref FlowerScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: "{{ service.flower.autoscaling.memory.target }}"
        ScaleInCooldown: "{{ service.flower.autoscaling.memory.scaleInCooldown }}"
        ScaleOutCooldown: "{{ service.flower.autoscaling.memory.scaleOutCooldown }}"
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageMemoryUtilization

Outputs:
  AirflowFlowerEndpoint:
    Value: !GetAtt FlowerAlb.DNSName